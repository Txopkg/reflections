What happens when you initialize a repository? Why do you need to do it?

A new repository is created. It is needed in order to make different commits and be able to use the version control.


How is the staging area different from the working directory and the repository? What value do you think it offers?

In the repository you have all the files you have commited so far, while in the working directory you have all the files, the ones in the actual commit and the ones you haven't commited yet. The staging area offers you the chance to select one by one which files in your working directory you want to commit.


How can you use the staging area to make sure you have one commit per logical change?

we can put the files in the stagging area after a logical change is performed. After that we can commit this change.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you want to make a change but not publish it into your offivial program. They help by letting you to continue making changes in your main branch and the merge it with your unofficial program.


How do the diagrams help you visualize the branch structure?

It is easier to understand the structure of all the versions in the program and how changes have been implmented; letting you know easier how to move from one version to anothen and how to reach them.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

You add and combine the changes of 2 diffent branches into 1 commit.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros: You can merge several changes in one time, for example changes made in different branches. Additionally, git merges them automatically so you don't have to pay attention to each change one by one.
Cons: Git sometimes is not able to merge the changes automatically so you'll have to see the conflicts and solve de one at a time.
